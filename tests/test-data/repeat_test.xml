<?xml version='1.0' encoding='UTF-8'?>
<!--This is a configuration file for the integration of a tools into Galaxy (https://galaxyproject.org/). This file was automatically generated using CTDConverter.-->
<!--Proposed Tool Section: [Test]-->
<tool id="repeat_test" name="repeat_test" version="@TOOL_VERSION@+galaxy@GALAXY_VERSION@">
  <description>Repeat parameter tests</description>
  <macros>
    <token name="@EXECUTABLE@">repeat_test</token>
    <import>macros.xml</import>
  </macros>
  <expand macro="requirements"/>
  <expand macro="stdio"/>
  <command detect_errors="exit_code"><![CDATA[@QUOTE_FOO@
@EXT_FOO@
#import re

## Preprocessing

## Main program call

export PYTHONPATH='$__tool_directory__/CTDopts' &&                         
@EXECUTABLE@ -write_ctd ./ &&
python3 '$__tool_directory__/fill_ctd.py' '@EXECUTABLE@.ctd' '$args_json' &&
@EXECUTABLE@ -ini @EXECUTABLE@.ctd
> $param_stdout

## Postprocessing]]></command>
  <configfiles>
    <inputs name="args_json" data_style="paths"/>
  </configfiles>
  <inputs>
    <param name="string_wodefault_optional" argument="-string_wodefault_optional" type="text" optional="true" value="" label="string list" help=" (space separated list, in order to allow for spaces in list items surround them by single quotes)">
      <expand macro="list_string_val"/>
      <expand macro="list_string_san"/>
    </param>
    <param name="string_wodefault_mandatory" argument="-string_wodefault_mandatory" type="text" optional="false" value="" label="string list" help=" (space separated list, in order to allow for spaces in list items surround them by single quotes)">
      <expand macro="list_string_val"/>
      <expand macro="list_string_san"/>
    </param>
    <param name="string_default_optional" argument="-string_default_optional" type="text" optional="true" value="&quot;A A&quot; -B" label="string list" help=" (space separated list, in order to allow for spaces in list items surround them by single quotes)">
      <expand macro="list_string_val"/>
      <expand macro="list_string_san"/>
    </param>
    <param name="string_default_mandatory" argument="-string_default_mandatory" type="text" optional="false" value="&quot;A A&quot; -B" label="string list" help=" (space separated list, in order to allow for spaces in list items surround them by single quotes)">
      <expand macro="list_string_val"/>
      <expand macro="list_string_san"/>
    </param>
    <param name="int_wodefault_optional" argument="-int_wodefault_optional" type="text" optional="true" value="" label="int list" help=" (space separated list, in order to allow for spaces in list items surround them by single quotes)">
      <expand macro="list_integer_valsan"/>
    </param>
    <param name="int_wodefault_mandatory" argument="-int_wodefault_mandatory" type="text" optional="false" value="" label="int list" help=" (space separated list, in order to allow for spaces in list items surround them by single quotes)">
      <expand macro="list_integer_valsan"/>
    </param>
    <param name="int_default_optional" argument="-int_default_optional" type="text" optional="true" value="-1 2" label="int list" help=" (space separated list, in order to allow for spaces in list items surround them by single quotes)">
      <expand macro="list_integer_valsan"/>
    </param>
    <param name="int_default_mandatory" argument="-int_default_mandatory" type="text" optional="false" value="-1 2" label="int list" help=" (space separated list, in order to allow for spaces in list items surround them by single quotes)">
      <expand macro="list_integer_valsan"/>
    </param>
    <param name="int_resticted_wodefault_optional" argument="-int_resticted_wodefault_optional" type="text" optional="true" value="" label="int list" help=" (space separated list, in order to allow for spaces in list items surround them by single quotes)">
      <expand macro="list_integer_valsan">
        <validator type="expression" message="a space separated list of integer values in the range -100:100 is required"><![CDATA[len(value.split(' ')) == len([_ for _ in value.split(' ') if  -100 <= int(_) <= 100])
]]></validator>
      </expand>
    </param>
    <param name="int_resticted_wodefault_mandatory" argument="-int_resticted_wodefault_mandatory" type="text" optional="false" value="" label="int list" help=" (space separated list, in order to allow for spaces in list items surround them by single quotes)">
      <expand macro="list_integer_valsan">
        <validator type="expression" message="a space separated list of integer values in the range -100: is required"><![CDATA[len(value.split(' ')) == len([_ for _ in value.split(' ') if  -100 <= int(_)])
]]></validator>
      </expand>
    </param>
    <param name="int_resticted_default_optional" argument="-int_resticted_default_optional" type="text" optional="true" value="-1 2" label="int list" help=" (space separated list, in order to allow for spaces in list items surround them by single quotes)">
      <expand macro="list_integer_valsan">
        <validator type="expression" message="a space separated list of integer values in the range :None is required"><![CDATA[len(value.split(' ')) == len([_ for _ in value.split(' ') if  int(_) <= 100])
]]></validator>
      </expand>
    </param>
    <param name="int_resticted_default_mandatory" argument="-int_resticted_default_mandatory" type="text" optional="false" value="-1 2" label="int list" help=" (space separated list, in order to allow for spaces in list items surround them by single quotes)">
      <expand macro="list_integer_valsan">
        <validator type="expression" message="a space separated list of integer values in the range -100:100 is required"><![CDATA[len(value.split(' ')) == len([_ for _ in value.split(' ') if  -100 <= int(_) <= 100])
]]></validator>
      </expand>
    </param>
    <param name="double_wodefault_optional" argument="-double_wodefault_optional" type="text" optional="true" value="" label="double list" help=" (space separated list, in order to allow for spaces in list items surround them by single quotes)">
      <expand macro="list_float_valsan"/>
    </param>
    <param name="double_wodefault_mandatory" argument="-double_wodefault_mandatory" type="text" optional="false" value="" label="double list" help=" (space separated list, in order to allow for spaces in list items surround them by single quotes)">
      <expand macro="list_float_valsan"/>
    </param>
    <param name="double_default_optional" argument="-double_default_optional" type="text" optional="true" value="-1.0 2.0" label="double list" help=" (space separated list, in order to allow for spaces in list items surround them by single quotes)">
      <expand macro="list_float_valsan"/>
    </param>
    <param name="double_default_mandatory" argument="-double_default_mandatory" type="text" optional="false" value="-1.0 2.0" label="double list" help=" (space separated list, in order to allow for spaces in list items surround them by single quotes)">
      <expand macro="list_float_valsan"/>
    </param>
    <param name="double_resticted_wodefault_optional" argument="-double_resticted_wodefault_optional" type="text" optional="true" value="" label="double list" help=" (space separated list, in order to allow for spaces in list items surround them by single quotes)">
      <expand macro="list_float_valsan">
        <validator type="expression" message="a space separated list of float values in the range -1.0:1.0 is required"><![CDATA[len(value.split(' ')) == len([_ for _ in value.split(' ') if  -1.0 <= float(_) <= 1.0])
]]></validator>
      </expand>
    </param>
    <param name="double_resticted_wodefault_mandatory" argument="-double_resticted_wodefault_mandatory" type="text" optional="false" value="" label="double list" help=" (space separated list, in order to allow for spaces in list items surround them by single quotes)">
      <expand macro="list_float_valsan">
        <validator type="expression" message="a space separated list of float values in the range -1.0: is required"><![CDATA[len(value.split(' ')) == len([_ for _ in value.split(' ') if  -1.0 <= float(_)])
]]></validator>
      </expand>
    </param>
    <param name="double_resticted_default_optional" argument="-double_resticted_default_optional" type="text" optional="true" value="-0.3 0.5" label="double list" help=" (space separated list, in order to allow for spaces in list items surround them by single quotes)">
      <expand macro="list_float_valsan">
        <validator type="expression" message="a space separated list of float values in the range :None is required"><![CDATA[len(value.split(' ')) == len([_ for _ in value.split(' ') if  float(_) <= 1.0])
]]></validator>
      </expand>
    </param>
    <param name="double_resticted_default_mandatory" argument="-double_resticted_default_mandatory" type="text" optional="false" value="-0.3 0.5" label="double list" help=" (space separated list, in order to allow for spaces in list items surround them by single quotes)">
      <expand macro="list_float_valsan">
        <validator type="expression" message="a space separated list of float values in the range -1.0:1.0 is required"><![CDATA[len(value.split(' ')) == len([_ for _ in value.split(' ') if  -1.0 <= float(_) <= 1.0])
]]></validator>
      </expand>
    </param>
    <section name="test_section" title="Test Section" help="" expanded="false">
      <param name="sect_string_wodefault_optional" argument="-test_section:sect_string_wodefault_optional" type="text" optional="true" value="" label="string list" help=" (space separated list, in order to allow for spaces in list items surround them by single quotes)">
        <expand macro="list_string_val"/>
        <expand macro="list_string_san"/>
      </param>
      <param name="sect_string_wodefault_mandatory" argument="-test_section:sect_string_wodefault_mandatory" type="text" optional="false" value="" label="string list" help=" (space separated list, in order to allow for spaces in list items surround them by single quotes)">
        <expand macro="list_string_val"/>
        <expand macro="list_string_san"/>
      </param>
      <param name="sect_string_default_optional" argument="-test_section:sect_string_default_optional" type="text" optional="true" value="&quot;A A&quot; -B" label="string list" help=" (space separated list, in order to allow for spaces in list items surround them by single quotes)">
        <expand macro="list_string_val"/>
        <expand macro="list_string_san"/>
      </param>
      <param name="sect_string_default_mandatory" argument="-test_section:sect_string_default_mandatory" type="text" optional="false" value="&quot;A A&quot; -B" label="string list" help=" (space separated list, in order to allow for spaces in list items surround them by single quotes)">
        <expand macro="list_string_val"/>
        <expand macro="list_string_san"/>
      </param>
      <param name="sect_int_wodefault_optional" argument="-test_section:sect_int_wodefault_optional" type="text" optional="true" value="" label="int list" help=" (space separated list, in order to allow for spaces in list items surround them by single quotes)">
        <expand macro="list_integer_valsan"/>
      </param>
      <param name="sect_int_wodefault_mandatory" argument="-test_section:sect_int_wodefault_mandatory" type="text" optional="false" value="" label="int list" help=" (space separated list, in order to allow for spaces in list items surround them by single quotes)">
        <expand macro="list_integer_valsan"/>
      </param>
      <param name="sect_int_default_optional" argument="-test_section:sect_int_default_optional" type="text" optional="true" value="-1 2" label="int list" help=" (space separated list, in order to allow for spaces in list items surround them by single quotes)">
        <expand macro="list_integer_valsan"/>
      </param>
      <param name="sect_int_default_mandatory" argument="-test_section:sect_int_default_mandatory" type="text" optional="false" value="-1 2" label="int list" help=" (space separated list, in order to allow for spaces in list items surround them by single quotes)">
        <expand macro="list_integer_valsan"/>
      </param>
      <param name="sect_int_resticted_wodefault_optional" argument="-test_section:sect_int_resticted_wodefault_optional" type="text" optional="true" value="" label="int list" help=" (space separated list, in order to allow for spaces in list items surround them by single quotes)">
        <expand macro="list_integer_valsan">
          <validator type="expression" message="a space separated list of integer values in the range -100:100 is required"><![CDATA[len(value.split(' ')) == len([_ for _ in value.split(' ') if  -100 <= int(_) <= 100])
]]></validator>
        </expand>
      </param>
      <param name="sect_int_resticted_wodefault_mandatory" argument="-test_section:sect_int_resticted_wodefault_mandatory" type="text" optional="false" value="" label="int list" help=" (space separated list, in order to allow for spaces in list items surround them by single quotes)">
        <expand macro="list_integer_valsan">
          <validator type="expression" message="a space separated list of integer values in the range -100: is required"><![CDATA[len(value.split(' ')) == len([_ for _ in value.split(' ') if  -100 <= int(_)])
]]></validator>
        </expand>
      </param>
      <param name="sect_int_resticted_default_optional" argument="-test_section:sect_int_resticted_default_optional" type="text" optional="true" value="-1 2" label="int list" help=" (space separated list, in order to allow for spaces in list items surround them by single quotes)">
        <expand macro="list_integer_valsan">
          <validator type="expression" message="a space separated list of integer values in the range :None is required"><![CDATA[len(value.split(' ')) == len([_ for _ in value.split(' ') if  int(_) <= 100])
]]></validator>
        </expand>
      </param>
      <param name="sect_int_resticted_default_mandatory" argument="-test_section:sect_int_resticted_default_mandatory" type="text" optional="false" value="-1 2" label="int list" help=" (space separated list, in order to allow for spaces in list items surround them by single quotes)">
        <expand macro="list_integer_valsan">
          <validator type="expression" message="a space separated list of integer values in the range -100:100 is required"><![CDATA[len(value.split(' ')) == len([_ for _ in value.split(' ') if  -100 <= int(_) <= 100])
]]></validator>
        </expand>
      </param>
      <param name="sect_double_wodefault_optional" argument="-test_section:sect_double_wodefault_optional" type="text" optional="true" value="" label="double list" help=" (space separated list, in order to allow for spaces in list items surround them by single quotes)">
        <expand macro="list_float_valsan"/>
      </param>
      <param name="sect_double_wodefault_mandatory" argument="-test_section:sect_double_wodefault_mandatory" type="text" optional="false" value="" label="double list" help=" (space separated list, in order to allow for spaces in list items surround them by single quotes)">
        <expand macro="list_float_valsan"/>
      </param>
      <param name="sect_double_default_optional" argument="-test_section:sect_double_default_optional" type="text" optional="true" value="-1.0 2.0" label="double list" help=" (space separated list, in order to allow for spaces in list items surround them by single quotes)">
        <expand macro="list_float_valsan"/>
      </param>
      <param name="sect_double_default_mandatory" argument="-test_section:sect_double_default_mandatory" type="text" optional="false" value="-1.0 2.0" label="double list" help=" (space separated list, in order to allow for spaces in list items surround them by single quotes)">
        <expand macro="list_float_valsan"/>
      </param>
      <param name="sect_double_resticted_wodefault_optional" argument="-test_section:sect_double_resticted_wodefault_optional" type="text" optional="true" value="" label="double list" help=" (space separated list, in order to allow for spaces in list items surround them by single quotes)">
        <expand macro="list_float_valsan">
          <validator type="expression" message="a space separated list of float values in the range -1.0:1.0 is required"><![CDATA[len(value.split(' ')) == len([_ for _ in value.split(' ') if  -1.0 <= float(_) <= 1.0])
]]></validator>
        </expand>
      </param>
      <param name="sect_double_resticted_wodefault_mandatory" argument="-test_section:sect_double_resticted_wodefault_mandatory" type="text" optional="false" value="" label="double list" help=" (space separated list, in order to allow for spaces in list items surround them by single quotes)">
        <expand macro="list_float_valsan">
          <validator type="expression" message="a space separated list of float values in the range -1.0: is required"><![CDATA[len(value.split(' ')) == len([_ for _ in value.split(' ') if  -1.0 <= float(_)])
]]></validator>
        </expand>
      </param>
      <param name="sect_double_resticted_default_optional" argument="-test_section:sect_double_resticted_default_optional" type="text" optional="true" value="-0.3 0.5" label="double list" help=" (space separated list, in order to allow for spaces in list items surround them by single quotes)">
        <expand macro="list_float_valsan">
          <validator type="expression" message="a space separated list of float values in the range :None is required"><![CDATA[len(value.split(' ')) == len([_ for _ in value.split(' ') if  float(_) <= 1.0])
]]></validator>
        </expand>
      </param>
      <param name="sect_double_resticted_default_mandatory" argument="-test_section:sect_double_resticted_default_mandatory" type="text" optional="false" value="-0.3 0.5" label="double list" help=" (space separated list, in order to allow for spaces in list items surround them by single quotes)">
        <expand macro="list_float_valsan">
          <validator type="expression" message="a space separated list of float values in the range -1.0:1.0 is required"><![CDATA[len(value.split(' ')) == len([_ for _ in value.split(' ') if  -1.0 <= float(_) <= 1.0])
]]></validator>
        </expand>
      </param>
      <param name="sect_string_wodefault_optional_adv" argument="-test_section:sect_string_wodefault_optional_adv" type="text" optional="true" value="" label="string list" help=" (space separated list, in order to allow for spaces in list items surround them by single quotes)">
        <expand macro="list_string_val"/>
        <expand macro="list_string_san"/>
      </param>
      <param name="sect_string_wodefault_mandatory_adv" argument="-test_section:sect_string_wodefault_mandatory_adv" type="text" optional="false" value="" label="string list" help=" (space separated list, in order to allow for spaces in list items surround them by single quotes)">
        <expand macro="list_string_val"/>
        <expand macro="list_string_san"/>
      </param>
      <param name="sect_string_default_optional_adv" argument="-test_section:sect_string_default_optional_adv" type="text" optional="true" value="&quot;A A&quot; -B" label="string list" help=" (space separated list, in order to allow for spaces in list items surround them by single quotes)">
        <expand macro="list_string_val"/>
        <expand macro="list_string_san"/>
      </param>
      <param name="sect_string_default_mandatory_adv" argument="-test_section:sect_string_default_mandatory_adv" type="text" optional="false" value="&quot;A A&quot; -B" label="string list" help=" (space separated list, in order to allow for spaces in list items surround them by single quotes)">
        <expand macro="list_string_val"/>
        <expand macro="list_string_san"/>
      </param>
      <param name="sect_int_wodefault_optional_adv" argument="-test_section:sect_int_wodefault_optional_adv" type="text" optional="true" value="" label="int list" help=" (space separated list, in order to allow for spaces in list items surround them by single quotes)">
        <expand macro="list_integer_valsan"/>
      </param>
      <param name="sect_int_wodefault_mandatory_adv" argument="-test_section:sect_int_wodefault_mandatory_adv" type="text" optional="false" value="" label="int list" help=" (space separated list, in order to allow for spaces in list items surround them by single quotes)">
        <expand macro="list_integer_valsan"/>
      </param>
      <param name="sect_int_default_optional_adv" argument="-test_section:sect_int_default_optional_adv" type="text" optional="true" value="-1 2" label="int list" help=" (space separated list, in order to allow for spaces in list items surround them by single quotes)">
        <expand macro="list_integer_valsan"/>
      </param>
      <param name="sect_int_default_mandatory_adv" argument="-test_section:sect_int_default_mandatory_adv" type="text" optional="false" value="-1 2" label="int list" help=" (space separated list, in order to allow for spaces in list items surround them by single quotes)">
        <expand macro="list_integer_valsan"/>
      </param>
      <param name="sect_int_resticted_wodefault_optional_adv" argument="-test_section:sect_int_resticted_wodefault_optional_adv" type="text" optional="true" value="" label="int list" help=" (space separated list, in order to allow for spaces in list items surround them by single quotes)">
        <expand macro="list_integer_valsan">
          <validator type="expression" message="a space separated list of integer values in the range -100:100 is required"><![CDATA[len(value.split(' ')) == len([_ for _ in value.split(' ') if  -100 <= int(_) <= 100])
]]></validator>
        </expand>
      </param>
      <param name="sect_int_resticted_wodefault_mandatory_adv" argument="-test_section:sect_int_resticted_wodefault_mandatory_adv" type="text" optional="false" value="" label="int list" help=" (space separated list, in order to allow for spaces in list items surround them by single quotes)">
        <expand macro="list_integer_valsan">
          <validator type="expression" message="a space separated list of integer values in the range -100: is required"><![CDATA[len(value.split(' ')) == len([_ for _ in value.split(' ') if  -100 <= int(_)])
]]></validator>
        </expand>
      </param>
      <param name="sect_int_resticted_default_optional_adv" argument="-test_section:sect_int_resticted_default_optional_adv" type="text" optional="true" value="-1 2" label="int list" help=" (space separated list, in order to allow for spaces in list items surround them by single quotes)">
        <expand macro="list_integer_valsan">
          <validator type="expression" message="a space separated list of integer values in the range :None is required"><![CDATA[len(value.split(' ')) == len([_ for _ in value.split(' ') if  int(_) <= 100])
]]></validator>
        </expand>
      </param>
      <param name="sect_int_resticted_default_mandatory_adv" argument="-test_section:sect_int_resticted_default_mandatory_adv" type="text" optional="false" value="-1 2" label="int list" help=" (space separated list, in order to allow for spaces in list items surround them by single quotes)">
        <expand macro="list_integer_valsan">
          <validator type="expression" message="a space separated list of integer values in the range -100:100 is required"><![CDATA[len(value.split(' ')) == len([_ for _ in value.split(' ') if  -100 <= int(_) <= 100])
]]></validator>
        </expand>
      </param>
      <param name="sect_double_wodefault_optional_adv" argument="-test_section:sect_double_wodefault_optional_adv" type="text" optional="true" value="" label="double list" help=" (space separated list, in order to allow for spaces in list items surround them by single quotes)">
        <expand macro="list_float_valsan"/>
      </param>
      <param name="sect_double_wodefault_mandatory_adv" argument="-test_section:sect_double_wodefault_mandatory_adv" type="text" optional="false" value="" label="double list" help=" (space separated list, in order to allow for spaces in list items surround them by single quotes)">
        <expand macro="list_float_valsan"/>
      </param>
      <param name="sect_double_default_optional_adv" argument="-test_section:sect_double_default_optional_adv" type="text" optional="true" value="-1.0 2.0" label="double list" help=" (space separated list, in order to allow for spaces in list items surround them by single quotes)">
        <expand macro="list_float_valsan"/>
      </param>
      <param name="sect_double_default_mandatory_adv" argument="-test_section:sect_double_default_mandatory_adv" type="text" optional="false" value="-1.0 2.0" label="double list" help=" (space separated list, in order to allow for spaces in list items surround them by single quotes)">
        <expand macro="list_float_valsan"/>
      </param>
      <param name="sect_double_resticted_wodefault_optional_adv" argument="-test_section:sect_double_resticted_wodefault_optional_adv" type="text" optional="true" value="" label="double list" help=" (space separated list, in order to allow for spaces in list items surround them by single quotes)">
        <expand macro="list_float_valsan">
          <validator type="expression" message="a space separated list of float values in the range -1.0:1.0 is required"><![CDATA[len(value.split(' ')) == len([_ for _ in value.split(' ') if  -1.0 <= float(_) <= 1.0])
]]></validator>
        </expand>
      </param>
      <param name="sect_double_resticted_wodefault_mandatory_adv" argument="-test_section:sect_double_resticted_wodefault_mandatory_adv" type="text" optional="false" value="" label="double list" help=" (space separated list, in order to allow for spaces in list items surround them by single quotes)">
        <expand macro="list_float_valsan">
          <validator type="expression" message="a space separated list of float values in the range -1.0: is required"><![CDATA[len(value.split(' ')) == len([_ for _ in value.split(' ') if  -1.0 <= float(_)])
]]></validator>
        </expand>
      </param>
      <param name="sect_double_resticted_default_optional_adv" argument="-test_section:sect_double_resticted_default_optional_adv" type="text" optional="true" value="-0.3 0.5" label="double list" help=" (space separated list, in order to allow for spaces in list items surround them by single quotes)">
        <expand macro="list_float_valsan">
          <validator type="expression" message="a space separated list of float values in the range :None is required"><![CDATA[len(value.split(' ')) == len([_ for _ in value.split(' ') if  float(_) <= 1.0])
]]></validator>
        </expand>
      </param>
      <param name="sect_double_resticted_default_mandatory_adv" argument="-test_section:sect_double_resticted_default_mandatory_adv" type="text" optional="false" value="-0.3 0.5" label="double list" help=" (space separated list, in order to allow for spaces in list items surround them by single quotes)">
        <expand macro="list_float_valsan">
          <validator type="expression" message="a space separated list of float values in the range -1.0:1.0 is required"><![CDATA[len(value.split(' ')) == len([_ for _ in value.split(' ') if  -1.0 <= float(_) <= 1.0])
]]></validator>
        </expand>
      </param>
    </section>
    <expand macro="adv_opts_macro">
      <param name="string_wodefault_optional_adv" argument="-string_wodefault_optional_adv" type="text" optional="true" value="" label="string list" help=" (space separated list, in order to allow for spaces in list items surround them by single quotes)">
        <expand macro="list_string_val"/>
        <expand macro="list_string_san"/>
      </param>
      <param name="string_wodefault_mandatory_adv" argument="-string_wodefault_mandatory_adv" type="text" optional="false" value="" label="string list" help=" (space separated list, in order to allow for spaces in list items surround them by single quotes)">
        <expand macro="list_string_val"/>
        <expand macro="list_string_san"/>
      </param>
      <param name="string_default_optional_adv" argument="-string_default_optional_adv" type="text" optional="true" value="&quot;A A&quot; -B" label="string list" help=" (space separated list, in order to allow for spaces in list items surround them by single quotes)">
        <expand macro="list_string_val"/>
        <expand macro="list_string_san"/>
      </param>
      <param name="string_default_mandatory_adv" argument="-string_default_mandatory_adv" type="text" optional="false" value="&quot;A A&quot; -B" label="string list" help=" (space separated list, in order to allow for spaces in list items surround them by single quotes)">
        <expand macro="list_string_val"/>
        <expand macro="list_string_san"/>
      </param>
      <param name="int_wodefault_optional_adv" argument="-int_wodefault_optional_adv" type="text" optional="true" value="" label="int list" help=" (space separated list, in order to allow for spaces in list items surround them by single quotes)">
        <expand macro="list_integer_valsan"/>
      </param>
      <param name="int_wodefault_mandatory_adv" argument="-int_wodefault_mandatory_adv" type="text" optional="false" value="" label="int list" help=" (space separated list, in order to allow for spaces in list items surround them by single quotes)">
        <expand macro="list_integer_valsan"/>
      </param>
      <param name="int_default_optional_adv" argument="-int_default_optional_adv" type="text" optional="true" value="-1 2" label="int list" help=" (space separated list, in order to allow for spaces in list items surround them by single quotes)">
        <expand macro="list_integer_valsan"/>
      </param>
      <param name="int_default_mandatory_adv" argument="-int_default_mandatory_adv" type="text" optional="false" value="-1 2" label="int list" help=" (space separated list, in order to allow for spaces in list items surround them by single quotes)">
        <expand macro="list_integer_valsan"/>
      </param>
      <param name="int_resticted_wodefault_optional_adv" argument="-int_resticted_wodefault_optional_adv" type="text" optional="true" value="" label="int list" help=" (space separated list, in order to allow for spaces in list items surround them by single quotes)">
        <expand macro="list_integer_valsan">
          <validator type="expression" message="a space separated list of integer values in the range -100:100 is required"><![CDATA[len(value.split(' ')) == len([_ for _ in value.split(' ') if  -100 <= int(_) <= 100])
]]></validator>
        </expand>
      </param>
      <param name="int_resticted_wodefault_mandatory_adv" argument="-int_resticted_wodefault_mandatory_adv" type="text" optional="false" value="" label="int list" help=" (space separated list, in order to allow for spaces in list items surround them by single quotes)">
        <expand macro="list_integer_valsan">
          <validator type="expression" message="a space separated list of integer values in the range -100: is required"><![CDATA[len(value.split(' ')) == len([_ for _ in value.split(' ') if  -100 <= int(_)])
]]></validator>
        </expand>
      </param>
      <param name="int_resticted_default_optional_adv" argument="-int_resticted_default_optional_adv" type="text" optional="true" value="-1 2" label="int list" help=" (space separated list, in order to allow for spaces in list items surround them by single quotes)">
        <expand macro="list_integer_valsan">
          <validator type="expression" message="a space separated list of integer values in the range :None is required"><![CDATA[len(value.split(' ')) == len([_ for _ in value.split(' ') if  int(_) <= 100])
]]></validator>
        </expand>
      </param>
      <param name="int_resticted_default_mandatory_adv" argument="-int_resticted_default_mandatory_adv" type="text" optional="false" value="-1 2" label="int list" help=" (space separated list, in order to allow for spaces in list items surround them by single quotes)">
        <expand macro="list_integer_valsan">
          <validator type="expression" message="a space separated list of integer values in the range -100:100 is required"><![CDATA[len(value.split(' ')) == len([_ for _ in value.split(' ') if  -100 <= int(_) <= 100])
]]></validator>
        </expand>
      </param>
      <param name="double_wodefault_optional_adv" argument="-double_wodefault_optional_adv" type="text" optional="true" value="" label="double list" help=" (space separated list, in order to allow for spaces in list items surround them by single quotes)">
        <expand macro="list_float_valsan"/>
      </param>
      <param name="double_wodefault_mandatory_adv" argument="-double_wodefault_mandatory_adv" type="text" optional="false" value="" label="double list" help=" (space separated list, in order to allow for spaces in list items surround them by single quotes)">
        <expand macro="list_float_valsan"/>
      </param>
      <param name="double_default_optional_adv" argument="-double_default_optional_adv" type="text" optional="true" value="-1.0 2.0" label="double list" help=" (space separated list, in order to allow for spaces in list items surround them by single quotes)">
        <expand macro="list_float_valsan"/>
      </param>
      <param name="double_default_mandatory_adv" argument="-double_default_mandatory_adv" type="text" optional="false" value="-1.0 2.0" label="double list" help=" (space separated list, in order to allow for spaces in list items surround them by single quotes)">
        <expand macro="list_float_valsan"/>
      </param>
      <param name="double_resticted_wodefault_optional_adv" argument="-double_resticted_wodefault_optional_adv" type="text" optional="true" value="" label="double list" help=" (space separated list, in order to allow for spaces in list items surround them by single quotes)">
        <expand macro="list_float_valsan">
          <validator type="expression" message="a space separated list of float values in the range -1.0:1.0 is required"><![CDATA[len(value.split(' ')) == len([_ for _ in value.split(' ') if  -1.0 <= float(_) <= 1.0])
]]></validator>
        </expand>
      </param>
      <param name="double_resticted_wodefault_mandatory_adv" argument="-double_resticted_wodefault_mandatory_adv" type="text" optional="false" value="" label="double list" help=" (space separated list, in order to allow for spaces in list items surround them by single quotes)">
        <expand macro="list_float_valsan">
          <validator type="expression" message="a space separated list of float values in the range -1.0: is required"><![CDATA[len(value.split(' ')) == len([_ for _ in value.split(' ') if  -1.0 <= float(_)])
]]></validator>
        </expand>
      </param>
      <param name="double_resticted_default_optional_adv" argument="-double_resticted_default_optional_adv" type="text" optional="true" value="-0.3 0.5" label="double list" help=" (space separated list, in order to allow for spaces in list items surround them by single quotes)">
        <expand macro="list_float_valsan">
          <validator type="expression" message="a space separated list of float values in the range :None is required"><![CDATA[len(value.split(' ')) == len([_ for _ in value.split(' ') if  float(_) <= 1.0])
]]></validator>
        </expand>
      </param>
      <param name="double_resticted_default_mandatory_adv" argument="-double_resticted_default_mandatory_adv" type="text" optional="false" value="-0.3 0.5" label="double list" help=" (space separated list, in order to allow for spaces in list items surround them by single quotes)">
        <expand macro="list_float_valsan">
          <validator type="expression" message="a space separated list of float values in the range -1.0:1.0 is required"><![CDATA[len(value.split(' ')) == len([_ for _ in value.split(' ') if  -1.0 <= float(_) <= 1.0])
]]></validator>
        </expand>
      </param>
    </expand>
  </inputs>
  <outputs>
    <data name="param_stdout" format="txt" label="Output from stdout"/>
  </outputs>
  <tests>
    <test expect_num_outputs="1">
      <param name="string_wodefault_mandatory" value="1 2"/>
      <param name="string_default_mandatory" value="&quot;A A&quot; -B"/>
      <param name="int_wodefault_mandatory" value="1 2"/>
      <param name="int_default_mandatory" value="-1 2"/>
      <param name="int_resticted_wodefault_mandatory" value="1 2"/>
      <param name="int_resticted_default_mandatory" value="-1 2"/>
      <param name="double_wodefault_mandatory" value="1 2"/>
      <param name="double_default_mandatory" value="-1.0 2.0"/>
      <param name="double_resticted_wodefault_mandatory" value="1 2"/>
      <param name="double_resticted_default_mandatory" value="-0.3 0.5"/>
      <section name="test_section">
        <param name="sect_string_wodefault_mandatory" value="1 2"/>
        <param name="sect_string_default_mandatory" value="&quot;A A&quot; -B"/>
        <param name="sect_int_wodefault_mandatory" value="1 2"/>
        <param name="sect_int_default_mandatory" value="-1 2"/>
        <param name="sect_int_resticted_wodefault_mandatory" value="1 2"/>
        <param name="sect_int_resticted_default_mandatory" value="-1 2"/>
        <param name="sect_double_wodefault_mandatory" value="1 2"/>
        <param name="sect_double_default_mandatory" value="-1.0 2.0"/>
        <param name="sect_double_resticted_wodefault_mandatory" value="1 2"/>
        <param name="sect_double_resticted_default_mandatory" value="-0.3 0.5"/>
        <param name="sect_string_wodefault_mandatory_adv" value="1 2"/>
        <param name="sect_string_default_mandatory_adv" value="&quot;A A&quot; -B"/>
        <param name="sect_int_wodefault_mandatory_adv" value="1 2"/>
        <param name="sect_int_default_mandatory_adv" value="-1 2"/>
        <param name="sect_int_resticted_wodefault_mandatory_adv" value="1 2"/>
        <param name="sect_int_resticted_default_mandatory_adv" value="-1 2"/>
        <param name="sect_double_wodefault_mandatory_adv" value="1 2"/>
        <param name="sect_double_default_mandatory_adv" value="-1.0 2.0"/>
        <param name="sect_double_resticted_wodefault_mandatory_adv" value="1 2"/>
        <param name="sect_double_resticted_default_mandatory_adv" value="-0.3 0.5"/>
      </section>
      <conditional name="adv_opts_cond">
        <param name="string_wodefault_mandatory_adv" value="1 2"/>
        <param name="string_default_mandatory_adv" value="&quot;A A&quot; -B"/>
        <param name="int_wodefault_mandatory_adv" value="1 2"/>
        <param name="int_default_mandatory_adv" value="-1 2"/>
        <param name="int_resticted_wodefault_mandatory_adv" value="1 2"/>
        <param name="int_resticted_default_mandatory_adv" value="-1 2"/>
        <param name="double_wodefault_mandatory_adv" value="1 2"/>
        <param name="double_default_mandatory_adv" value="-1.0 2.0"/>
        <param name="double_resticted_wodefault_mandatory_adv" value="1 2"/>
        <param name="double_resticted_default_mandatory_adv" value="-0.3 0.5"/>
        <param name="adv_opts_selector" value="advanced"/>
      </conditional>
      <output name="param_stdout" ftype="txt" value="outfile.txt" lines_diff="2"/>
    </test>
  </tests>
  <help><![CDATA[Repeat parameter tests.


For more information, visit http://www.openms.de/unavailable.html]]></help>
  <expand macro="references"/>
</tool>
