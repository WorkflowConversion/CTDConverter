<?xml version='1.0' encoding='UTF-8'?>
<!--This is a configuration file for the integration of a tools into Galaxy (https://galaxyproject.org/). This file was automatically generated using CTDConverter.-->
<!--Proposed Tool Section: [String Test]-->
<tool id="echo_RepeatTest" name="echo RepeatTest" version="2.3.0">
  <description>Repeat parameter tests</description>
  <macros>
    <token name="@EXECUTABLE@">echo RepeatTest</token>
    <import>macros.xml</import>
  </macros>
  <expand macro="requirements"/>
  <expand macro="stdio"/>
  <expand macro="references"/>
  <command><![CDATA[
echo RepeatTest

#if str($param_string_wodefault_optional):
  -string_wodefault_optional '$param_string_wodefault_optional'
#end if
-string_wodefault_mandatory '$param_string_wodefault_mandatory'
#if str($param_string_default_optional):
  -string_default_optional '$param_string_default_optional'
#end if
-string_default_mandatory '$param_string_default_mandatory'
#if str($param_int_wodefault_optional):
  -int_wodefault_optional '$param_int_wodefault_optional'
#end if
-int_wodefault_mandatory '$param_int_wodefault_mandatory'
#if str($param_int_default_optional):
  -int_default_optional '$param_int_default_optional'
#end if
-int_default_mandatory '$param_int_default_mandatory'
#if str($param_int_resticted_wodefault_optional):
  -int_resticted_wodefault_optional '$param_int_resticted_wodefault_optional'
#end if
-int_resticted_wodefault_mandatory '$param_int_resticted_wodefault_mandatory'
#if str($param_int_resticted_default_optional):
  -int_resticted_default_optional '$param_int_resticted_default_optional'
#end if
-int_resticted_default_mandatory '$param_int_resticted_default_mandatory'
#if str($param_double_wodefault_optional):
  -double_wodefault_optional '$param_double_wodefault_optional'
#end if
-double_wodefault_mandatory '$param_double_wodefault_mandatory'
#if str($param_double_default_optional):
  -double_default_optional '$param_double_default_optional'
#end if
-double_default_mandatory '$param_double_default_mandatory'
#if str($param_double_resticted_wodefault_optional):
  -double_resticted_wodefault_optional '$param_double_resticted_wodefault_optional'
#end if
-double_resticted_wodefault_mandatory '$param_double_resticted_wodefault_mandatory'
#if str($param_double_resticted_default_optional):
  -double_resticted_default_optional '$param_double_resticted_default_optional'
#end if
-double_resticted_default_mandatory '$param_double_resticted_default_mandatory'
#if $adv_opts.adv_opts_selector=='advanced':
  #if str($adv_opts.param_string_wodefault_optional_adv):
    -string_wodefault_optional_adv '$adv_opts.param_string_wodefault_optional_adv'
  #end if
  -string_wodefault_mandatory_adv '$adv_opts.param_string_wodefault_mandatory_adv'
  #if str($adv_opts.param_string_default_optional_adv):
    -string_default_optional_adv '$adv_opts.param_string_default_optional_adv'
  #end if
  -string_default_mandatory_adv '$adv_opts.param_string_default_mandatory_adv'
  #if str($adv_opts.param_int_wodefault_optional_adv):
    -int_wodefault_optional_adv '$adv_opts.param_int_wodefault_optional_adv'
  #end if
  -int_wodefault_mandatory_adv '$adv_opts.param_int_wodefault_mandatory_adv'
  #if str($adv_opts.param_int_default_optional_adv):
    -int_default_optional_adv '$adv_opts.param_int_default_optional_adv'
  #end if
  -int_default_mandatory_adv '$adv_opts.param_int_default_mandatory_adv'
  #if str($adv_opts.param_int_resticted_wodefault_optional_adv):
    -int_resticted_wodefault_optional_adv '$adv_opts.param_int_resticted_wodefault_optional_adv'
  #end if
  -int_resticted_wodefault_mandatory_adv '$adv_opts.param_int_resticted_wodefault_mandatory_adv'
  #if str($adv_opts.param_int_resticted_default_optional_adv):
    -int_resticted_default_optional_adv '$adv_opts.param_int_resticted_default_optional_adv'
  #end if
  -int_resticted_default_mandatory_adv '$adv_opts.param_int_resticted_default_mandatory_adv'
  #if str($adv_opts.param_double_wodefault_optional_adv):
    -double_wodefault_optional_adv '$adv_opts.param_double_wodefault_optional_adv'
  #end if
  -double_wodefault_mandatory_adv '$adv_opts.param_double_wodefault_mandatory_adv'
  #if str($adv_opts.param_double_default_optional_adv):
    -double_default_optional_adv '$adv_opts.param_double_default_optional_adv'
  #end if
  -double_default_mandatory_adv '$adv_opts.param_double_default_mandatory_adv'
  #if str($adv_opts.param_double_resticted_wodefault_optional_adv):
    -double_resticted_wodefault_optional_adv '$adv_opts.param_double_resticted_wodefault_optional_adv'
  #end if
  -double_resticted_wodefault_mandatory_adv '$adv_opts.param_double_resticted_wodefault_mandatory_adv'
  #if str($adv_opts.param_double_resticted_default_optional_adv):
    -double_resticted_default_optional_adv '$adv_opts.param_double_resticted_default_optional_adv'
  #end if
  -double_resticted_default_mandatory_adv '$adv_opts.param_double_resticted_default_mandatory_adv'
#end if
> $param_stdout
]]></command>
  <inputs>
    <param name="param_string_wodefault_optional" type="text" optional="true" value="" label="string list" help=" (comma separated list)" argument="-string_wodefault_optional">
      <sanitizer>
        <valid initial="string.printable">
          <remove value="'"/>
          <remove value="&quot;"/>
        </valid>
      </sanitizer>
    </param>
    <param name="param_string_wodefault_mandatory" type="text" optional="false" value="" label="string list" help=" (comma separated list)" argument="-string_wodefault_mandatory">
      <sanitizer>
        <valid initial="string.printable">
          <remove value="'"/>
          <remove value="&quot;"/>
        </valid>
      </sanitizer>
    </param>
    <param name="param_string_default_optional" type="text" optional="true" value="A,B" label="string list" help=" (comma separated list)" argument="-string_default_optional">
      <sanitizer>
        <valid initial="string.printable">
          <remove value="'"/>
          <remove value="&quot;"/>
        </valid>
      </sanitizer>
    </param>
    <param name="param_string_default_mandatory" type="text" optional="false" value="A,B" label="string list" help=" (comma separated list)" argument="-string_default_mandatory">
      <sanitizer>
        <valid initial="string.printable">
          <remove value="'"/>
          <remove value="&quot;"/>
        </valid>
      </sanitizer>
    </param>
    <param name="param_int_wodefault_optional" type="text" optional="true" value="" label="int list" help=" (comma separated list)" argument="-int_wodefault_optional">
      <validator type="regex" message="a comma separated list of integer values is required"><![CDATA[^ *[+-]?[0-9]+( *, *[+-]?[0-9]+)* *$]]></validator>
      <sanitizer>
        <valid initial="string.printable">
          <remove value=" "/>
        </valid>
        <mapping initial="none">
          <add source=" " target=""/>
        </mapping>
      </sanitizer>
    </param>
    <param name="param_int_wodefault_mandatory" type="text" optional="false" value="" label="int list" help=" (comma separated list)" argument="-int_wodefault_mandatory">
      <validator type="regex" message="a comma separated list of integer values is required"><![CDATA[^ *[+-]?[0-9]+( *, *[+-]?[0-9]+)* *$]]></validator>
      <sanitizer>
        <valid initial="string.printable">
          <remove value=" "/>
        </valid>
        <mapping initial="none">
          <add source=" " target=""/>
        </mapping>
      </sanitizer>
    </param>
    <param name="param_int_default_optional" type="text" optional="true" value="1,2" label="int list" help=" (comma separated list)" argument="-int_default_optional">
      <validator type="regex" message="a comma separated list of integer values is required"><![CDATA[^ *[+-]?[0-9]+( *, *[+-]?[0-9]+)* *$]]></validator>
      <sanitizer>
        <valid initial="string.printable">
          <remove value=" "/>
        </valid>
        <mapping initial="none">
          <add source=" " target=""/>
        </mapping>
      </sanitizer>
    </param>
    <param name="param_int_default_mandatory" type="text" optional="false" value="1,2" label="int list" help=" (comma separated list)" argument="-int_default_mandatory">
      <validator type="regex" message="a comma separated list of integer values is required"><![CDATA[^ *[+-]?[0-9]+( *, *[+-]?[0-9]+)* *$]]></validator>
      <sanitizer>
        <valid initial="string.printable">
          <remove value=" "/>
        </valid>
        <mapping initial="none">
          <add source=" " target=""/>
        </mapping>
      </sanitizer>
    </param>
    <param name="param_int_resticted_wodefault_optional" type="text" optional="true" value="" label="int list" help=" (comma separated list)" argument="-int_resticted_wodefault_optional">
      <validator type="regex" message="a comma separated list of integer values is required"><![CDATA[^ *[+-]?[0-9]+( *, *[+-]?[0-9]+)* *$]]></validator>
      <validator type="expression" message="a comma separated list of integer values in the range 0:100 is required"><![CDATA[len(value.split(',')) == len([_ for _ in value.split(',') if 0 <= int(_) <= 100])
]]></validator>
      <sanitizer>
        <valid initial="string.printable">
          <remove value=" "/>
        </valid>
        <mapping initial="none">
          <add source=" " target=""/>
        </mapping>
      </sanitizer>
    </param>
    <param name="param_int_resticted_wodefault_mandatory" type="text" optional="false" value="" label="int list" help=" (comma separated list)" argument="-int_resticted_wodefault_mandatory">
      <validator type="regex" message="a comma separated list of integer values is required"><![CDATA[^ *[+-]?[0-9]+( *, *[+-]?[0-9]+)* *$]]></validator>
      <validator type="expression" message="a comma separated list of integer values in the range 0: is required"><![CDATA[len(value.split(',')) == len([_ for _ in value.split(',') if 0 <= int(_)])
]]></validator>
      <sanitizer>
        <valid initial="string.printable">
          <remove value=" "/>
        </valid>
        <mapping initial="none">
          <add source=" " target=""/>
        </mapping>
      </sanitizer>
    </param>
    <param name="param_int_resticted_default_optional" type="text" optional="true" value="1,2" label="int list" help=" (comma separated list)" argument="-int_resticted_default_optional">
      <validator type="regex" message="a comma separated list of integer values is required"><![CDATA[^ *[+-]?[0-9]+( *, *[+-]?[0-9]+)* *$]]></validator>
      <validator type="expression" message="a comma separated list of integer values in the range :None is required"><![CDATA[len(value.split(',')) == len([_ for _ in value.split(',') if int(_) <= 100])
]]></validator>
      <sanitizer>
        <valid initial="string.printable">
          <remove value=" "/>
        </valid>
        <mapping initial="none">
          <add source=" " target=""/>
        </mapping>
      </sanitizer>
    </param>
    <param name="param_int_resticted_default_mandatory" type="text" optional="false" value="1,2" label="int list" help=" (comma separated list)" argument="-int_resticted_default_mandatory">
      <validator type="regex" message="a comma separated list of integer values is required"><![CDATA[^ *[+-]?[0-9]+( *, *[+-]?[0-9]+)* *$]]></validator>
      <validator type="expression" message="a comma separated list of integer values in the range 0:100 is required"><![CDATA[len(value.split(',')) == len([_ for _ in value.split(',') if 0 <= int(_) <= 100])
]]></validator>
      <sanitizer>
        <valid initial="string.printable">
          <remove value=" "/>
        </valid>
        <mapping initial="none">
          <add source=" " target=""/>
        </mapping>
      </sanitizer>
    </param>
    <param name="param_double_wodefault_optional" type="text" optional="true" value="" label="double list" help=" (comma separated list)" argument="-double_wodefault_optional">
      <validator type="regex" message="a comma separated list of float values is required"><![CDATA[^ *[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)?( *, *[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)?)* *$]]></validator>
      <sanitizer>
        <valid initial="string.printable">
          <remove value=" "/>
        </valid>
        <mapping initial="none">
          <add source=" " target=""/>
        </mapping>
      </sanitizer>
    </param>
    <param name="param_double_wodefault_mandatory" type="text" optional="false" value="" label="double list" help=" (comma separated list)" argument="-double_wodefault_mandatory">
      <validator type="regex" message="a comma separated list of float values is required"><![CDATA[^ *[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)?( *, *[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)?)* *$]]></validator>
      <sanitizer>
        <valid initial="string.printable">
          <remove value=" "/>
        </valid>
        <mapping initial="none">
          <add source=" " target=""/>
        </mapping>
      </sanitizer>
    </param>
    <param name="param_double_default_optional" type="text" optional="true" value="1.0,2.0" label="double list" help=" (comma separated list)" argument="-double_default_optional">
      <validator type="regex" message="a comma separated list of float values is required"><![CDATA[^ *[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)?( *, *[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)?)* *$]]></validator>
      <sanitizer>
        <valid initial="string.printable">
          <remove value=" "/>
        </valid>
        <mapping initial="none">
          <add source=" " target=""/>
        </mapping>
      </sanitizer>
    </param>
    <param name="param_double_default_mandatory" type="text" optional="false" value="1.0,2.0" label="double list" help=" (comma separated list)" argument="-double_default_mandatory">
      <validator type="regex" message="a comma separated list of float values is required"><![CDATA[^ *[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)?( *, *[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)?)* *$]]></validator>
      <sanitizer>
        <valid initial="string.printable">
          <remove value=" "/>
        </valid>
        <mapping initial="none">
          <add source=" " target=""/>
        </mapping>
      </sanitizer>
    </param>
    <param name="param_double_resticted_wodefault_optional" type="text" optional="true" value="" label="double list" help=" (comma separated list)" argument="-double_resticted_wodefault_optional">
      <validator type="regex" message="a comma separated list of float values is required"><![CDATA[^ *[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)?( *, *[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)?)* *$]]></validator>
      <validator type="expression" message="a comma separated list of float values in the range 0.0:1.0 is required"><![CDATA[len(value.split(',')) == len([_ for _ in value.split(',') if 0.0 <= float(_) <= 1.0])
]]></validator>
      <sanitizer>
        <valid initial="string.printable">
          <remove value=" "/>
        </valid>
        <mapping initial="none">
          <add source=" " target=""/>
        </mapping>
      </sanitizer>
    </param>
    <param name="param_double_resticted_wodefault_mandatory" type="text" optional="false" value="" label="double list" help=" (comma separated list)" argument="-double_resticted_wodefault_mandatory">
      <validator type="regex" message="a comma separated list of float values is required"><![CDATA[^ *[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)?( *, *[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)?)* *$]]></validator>
      <validator type="expression" message="a comma separated list of float values in the range 0.0: is required"><![CDATA[len(value.split(',')) == len([_ for _ in value.split(',') if 0.0 <= float(_)])
]]></validator>
      <sanitizer>
        <valid initial="string.printable">
          <remove value=" "/>
        </valid>
        <mapping initial="none">
          <add source=" " target=""/>
        </mapping>
      </sanitizer>
    </param>
    <param name="param_double_resticted_default_optional" type="text" optional="true" value="0.3,0.5" label="double list" help=" (comma separated list)" argument="-double_resticted_default_optional">
      <validator type="regex" message="a comma separated list of float values is required"><![CDATA[^ *[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)?( *, *[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)?)* *$]]></validator>
      <validator type="expression" message="a comma separated list of float values in the range :None is required"><![CDATA[len(value.split(',')) == len([_ for _ in value.split(',') if float(_) <= 1.0])
]]></validator>
      <sanitizer>
        <valid initial="string.printable">
          <remove value=" "/>
        </valid>
        <mapping initial="none">
          <add source=" " target=""/>
        </mapping>
      </sanitizer>
    </param>
    <param name="param_double_resticted_default_mandatory" type="text" optional="false" value="0.3,0.5" label="double list" help=" (comma separated list)" argument="-double_resticted_default_mandatory">
      <validator type="regex" message="a comma separated list of float values is required"><![CDATA[^ *[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)?( *, *[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)?)* *$]]></validator>
      <validator type="expression" message="a comma separated list of float values in the range 0.0:1.0 is required"><![CDATA[len(value.split(',')) == len([_ for _ in value.split(',') if 0.0 <= float(_) <= 1.0])
]]></validator>
      <sanitizer>
        <valid initial="string.printable">
          <remove value=" "/>
        </valid>
        <mapping initial="none">
          <add source=" " target=""/>
        </mapping>
      </sanitizer>
    </param>
    <expand macro="advanced_options">
      <param name="param_string_wodefault_optional_adv" type="text" optional="true" value="" label="string list" help=" (comma separated list)" argument="-string_wodefault_optional_adv">
        <sanitizer>
          <valid initial="string.printable">
            <remove value="'"/>
            <remove value="&quot;"/>
          </valid>
        </sanitizer>
      </param>
      <param name="param_string_wodefault_mandatory_adv" type="text" optional="false" value="" label="string list" help=" (comma separated list)" argument="-string_wodefault_mandatory_adv">
        <sanitizer>
          <valid initial="string.printable">
            <remove value="'"/>
            <remove value="&quot;"/>
          </valid>
        </sanitizer>
      </param>
      <param name="param_string_default_optional_adv" type="text" optional="true" value="A,B" label="string list" help=" (comma separated list)" argument="-string_default_optional_adv">
        <sanitizer>
          <valid initial="string.printable">
            <remove value="'"/>
            <remove value="&quot;"/>
          </valid>
        </sanitizer>
      </param>
      <param name="param_string_default_mandatory_adv" type="text" optional="false" value="A,B" label="string list" help=" (comma separated list)" argument="-string_default_mandatory_adv">
        <sanitizer>
          <valid initial="string.printable">
            <remove value="'"/>
            <remove value="&quot;"/>
          </valid>
        </sanitizer>
      </param>
      <param name="param_int_wodefault_optional_adv" type="text" optional="true" value="" label="int list" help=" (comma separated list)" argument="-int_wodefault_optional_adv">
        <validator type="regex" message="a comma separated list of integer values is required"><![CDATA[^ *[+-]?[0-9]+( *, *[+-]?[0-9]+)* *$]]></validator>
        <sanitizer>
          <valid initial="string.printable">
            <remove value=" "/>
          </valid>
          <mapping initial="none">
            <add source=" " target=""/>
          </mapping>
        </sanitizer>
      </param>
      <param name="param_int_wodefault_mandatory_adv" type="text" optional="false" value="" label="int list" help=" (comma separated list)" argument="-int_wodefault_mandatory_adv">
        <validator type="regex" message="a comma separated list of integer values is required"><![CDATA[^ *[+-]?[0-9]+( *, *[+-]?[0-9]+)* *$]]></validator>
        <sanitizer>
          <valid initial="string.printable">
            <remove value=" "/>
          </valid>
          <mapping initial="none">
            <add source=" " target=""/>
          </mapping>
        </sanitizer>
      </param>
      <param name="param_int_default_optional_adv" type="text" optional="true" value="1,2" label="int list" help=" (comma separated list)" argument="-int_default_optional_adv">
        <validator type="regex" message="a comma separated list of integer values is required"><![CDATA[^ *[+-]?[0-9]+( *, *[+-]?[0-9]+)* *$]]></validator>
        <sanitizer>
          <valid initial="string.printable">
            <remove value=" "/>
          </valid>
          <mapping initial="none">
            <add source=" " target=""/>
          </mapping>
        </sanitizer>
      </param>
      <param name="param_int_default_mandatory_adv" type="text" optional="false" value="1,2" label="int list" help=" (comma separated list)" argument="-int_default_mandatory_adv">
        <validator type="regex" message="a comma separated list of integer values is required"><![CDATA[^ *[+-]?[0-9]+( *, *[+-]?[0-9]+)* *$]]></validator>
        <sanitizer>
          <valid initial="string.printable">
            <remove value=" "/>
          </valid>
          <mapping initial="none">
            <add source=" " target=""/>
          </mapping>
        </sanitizer>
      </param>
      <param name="param_int_resticted_wodefault_optional_adv" type="text" optional="true" value="" label="int list" help=" (comma separated list)" argument="-int_resticted_wodefault_optional_adv">
        <validator type="regex" message="a comma separated list of integer values is required"><![CDATA[^ *[+-]?[0-9]+( *, *[+-]?[0-9]+)* *$]]></validator>
        <validator type="expression" message="a comma separated list of integer values in the range 0:100 is required"><![CDATA[len(value.split(',')) == len([_ for _ in value.split(',') if 0 <= int(_) <= 100])
]]></validator>
        <sanitizer>
          <valid initial="string.printable">
            <remove value=" "/>
          </valid>
          <mapping initial="none">
            <add source=" " target=""/>
          </mapping>
        </sanitizer>
      </param>
      <param name="param_int_resticted_wodefault_mandatory_adv" type="text" optional="false" value="" label="int list" help=" (comma separated list)" argument="-int_resticted_wodefault_mandatory_adv">
        <validator type="regex" message="a comma separated list of integer values is required"><![CDATA[^ *[+-]?[0-9]+( *, *[+-]?[0-9]+)* *$]]></validator>
        <validator type="expression" message="a comma separated list of integer values in the range 0: is required"><![CDATA[len(value.split(',')) == len([_ for _ in value.split(',') if 0 <= int(_)])
]]></validator>
        <sanitizer>
          <valid initial="string.printable">
            <remove value=" "/>
          </valid>
          <mapping initial="none">
            <add source=" " target=""/>
          </mapping>
        </sanitizer>
      </param>
      <param name="param_int_resticted_default_optional_adv" type="text" optional="true" value="1,2" label="int list" help=" (comma separated list)" argument="-int_resticted_default_optional_adv">
        <validator type="regex" message="a comma separated list of integer values is required"><![CDATA[^ *[+-]?[0-9]+( *, *[+-]?[0-9]+)* *$]]></validator>
        <validator type="expression" message="a comma separated list of integer values in the range :None is required"><![CDATA[len(value.split(',')) == len([_ for _ in value.split(',') if int(_) <= 100])
]]></validator>
        <sanitizer>
          <valid initial="string.printable">
            <remove value=" "/>
          </valid>
          <mapping initial="none">
            <add source=" " target=""/>
          </mapping>
        </sanitizer>
      </param>
      <param name="param_int_resticted_default_mandatory_adv" type="text" optional="false" value="1,2" label="int list" help=" (comma separated list)" argument="-int_resticted_default_mandatory_adv">
        <validator type="regex" message="a comma separated list of integer values is required"><![CDATA[^ *[+-]?[0-9]+( *, *[+-]?[0-9]+)* *$]]></validator>
        <validator type="expression" message="a comma separated list of integer values in the range 0:100 is required"><![CDATA[len(value.split(',')) == len([_ for _ in value.split(',') if 0 <= int(_) <= 100])
]]></validator>
        <sanitizer>
          <valid initial="string.printable">
            <remove value=" "/>
          </valid>
          <mapping initial="none">
            <add source=" " target=""/>
          </mapping>
        </sanitizer>
      </param>
      <param name="param_double_wodefault_optional_adv" type="text" optional="true" value="" label="double list" help=" (comma separated list)" argument="-double_wodefault_optional_adv">
        <validator type="regex" message="a comma separated list of float values is required"><![CDATA[^ *[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)?( *, *[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)?)* *$]]></validator>
        <sanitizer>
          <valid initial="string.printable">
            <remove value=" "/>
          </valid>
          <mapping initial="none">
            <add source=" " target=""/>
          </mapping>
        </sanitizer>
      </param>
      <param name="param_double_wodefault_mandatory_adv" type="text" optional="false" value="" label="double list" help=" (comma separated list)" argument="-double_wodefault_mandatory_adv">
        <validator type="regex" message="a comma separated list of float values is required"><![CDATA[^ *[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)?( *, *[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)?)* *$]]></validator>
        <sanitizer>
          <valid initial="string.printable">
            <remove value=" "/>
          </valid>
          <mapping initial="none">
            <add source=" " target=""/>
          </mapping>
        </sanitizer>
      </param>
      <param name="param_double_default_optional_adv" type="text" optional="true" value="1.0,2.0" label="double list" help=" (comma separated list)" argument="-double_default_optional_adv">
        <validator type="regex" message="a comma separated list of float values is required"><![CDATA[^ *[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)?( *, *[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)?)* *$]]></validator>
        <sanitizer>
          <valid initial="string.printable">
            <remove value=" "/>
          </valid>
          <mapping initial="none">
            <add source=" " target=""/>
          </mapping>
        </sanitizer>
      </param>
      <param name="param_double_default_mandatory_adv" type="text" optional="false" value="1.0,2.0" label="double list" help=" (comma separated list)" argument="-double_default_mandatory_adv">
        <validator type="regex" message="a comma separated list of float values is required"><![CDATA[^ *[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)?( *, *[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)?)* *$]]></validator>
        <sanitizer>
          <valid initial="string.printable">
            <remove value=" "/>
          </valid>
          <mapping initial="none">
            <add source=" " target=""/>
          </mapping>
        </sanitizer>
      </param>
      <param name="param_double_resticted_wodefault_optional_adv" type="text" optional="true" value="" label="double list" help=" (comma separated list)" argument="-double_resticted_wodefault_optional_adv">
        <validator type="regex" message="a comma separated list of float values is required"><![CDATA[^ *[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)?( *, *[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)?)* *$]]></validator>
        <validator type="expression" message="a comma separated list of float values in the range 0.0:1.0 is required"><![CDATA[len(value.split(',')) == len([_ for _ in value.split(',') if 0.0 <= float(_) <= 1.0])
]]></validator>
        <sanitizer>
          <valid initial="string.printable">
            <remove value=" "/>
          </valid>
          <mapping initial="none">
            <add source=" " target=""/>
          </mapping>
        </sanitizer>
      </param>
      <param name="param_double_resticted_wodefault_mandatory_adv" type="text" optional="false" value="" label="double list" help=" (comma separated list)" argument="-double_resticted_wodefault_mandatory_adv">
        <validator type="regex" message="a comma separated list of float values is required"><![CDATA[^ *[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)?( *, *[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)?)* *$]]></validator>
        <validator type="expression" message="a comma separated list of float values in the range 0.0: is required"><![CDATA[len(value.split(',')) == len([_ for _ in value.split(',') if 0.0 <= float(_)])
]]></validator>
        <sanitizer>
          <valid initial="string.printable">
            <remove value=" "/>
          </valid>
          <mapping initial="none">
            <add source=" " target=""/>
          </mapping>
        </sanitizer>
      </param>
      <param name="param_double_resticted_default_optional_adv" type="text" optional="true" value="0.3,0.5" label="double list" help=" (comma separated list)" argument="-double_resticted_default_optional_adv">
        <validator type="regex" message="a comma separated list of float values is required"><![CDATA[^ *[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)?( *, *[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)?)* *$]]></validator>
        <validator type="expression" message="a comma separated list of float values in the range :None is required"><![CDATA[len(value.split(',')) == len([_ for _ in value.split(',') if float(_) <= 1.0])
]]></validator>
        <sanitizer>
          <valid initial="string.printable">
            <remove value=" "/>
          </valid>
          <mapping initial="none">
            <add source=" " target=""/>
          </mapping>
        </sanitizer>
      </param>
      <param name="param_double_resticted_default_mandatory_adv" type="text" optional="false" value="0.3,0.5" label="double list" help=" (comma separated list)" argument="-double_resticted_default_mandatory_adv">
        <validator type="regex" message="a comma separated list of float values is required"><![CDATA[^ *[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)?( *, *[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)?)* *$]]></validator>
        <validator type="expression" message="a comma separated list of float values in the range 0.0:1.0 is required"><![CDATA[len(value.split(',')) == len([_ for _ in value.split(',') if 0.0 <= float(_) <= 1.0])
]]></validator>
        <sanitizer>
          <valid initial="string.printable">
            <remove value=" "/>
          </valid>
          <mapping initial="none">
            <add source=" " target=""/>
          </mapping>
        </sanitizer>
      </param>
    </expand>
  </inputs>
  <outputs>
    <data name="param_stdout" format="txt" label="Output from stdout"/>
  </outputs>
  <tests>
    <test expect_num_outputs="1">
      <param name="param_string_wodefault_mandatory" value="1,2"/>
      <param name="param_string_default_mandatory" value="A,B"/>
      <param name="param_int_wodefault_mandatory" value="1,2"/>
      <param name="param_int_default_mandatory" value="1,2"/>
      <param name="param_int_resticted_wodefault_mandatory" value="1,2"/>
      <param name="param_int_resticted_default_mandatory" value="1,2"/>
      <param name="param_double_wodefault_mandatory" value="1,2"/>
      <param name="param_double_default_mandatory" value="1.0,2.0"/>
      <param name="param_double_resticted_wodefault_mandatory" value="1,2"/>
      <param name="param_double_resticted_default_mandatory" value="0.3,0.5"/>
      <conditional macro="advanced_options" name="adv_opts">
        <param name="param_string_wodefault_mandatory_adv" value="1,2"/>
        <param name="param_string_default_mandatory_adv" value="A,B"/>
        <param name="param_int_wodefault_mandatory_adv" value="1,2"/>
        <param name="param_int_default_mandatory_adv" value="1,2"/>
        <param name="param_int_resticted_wodefault_mandatory_adv" value="1,2"/>
        <param name="param_int_resticted_default_mandatory_adv" value="1,2"/>
        <param name="param_double_wodefault_mandatory_adv" value="1,2"/>
        <param name="param_double_default_mandatory_adv" value="1.0,2.0"/>
        <param name="param_double_resticted_wodefault_mandatory_adv" value="1,2"/>
        <param name="param_double_resticted_default_mandatory_adv" value="0.3,0.5"/>
        <param name="adv_opts_selector" value="advanced"/>
      </conditional>
      <output name="param_stdout" ftype="txt" value="outfile.txt" lines_diff="2"/>
    </test>
  </tests>
  <help><![CDATA[Repeat parameter tests.


For more information, visit http://docs.are/unavailable.html]]></help>
</tool>
